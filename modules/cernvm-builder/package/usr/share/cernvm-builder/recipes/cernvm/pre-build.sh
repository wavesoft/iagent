#!/bin/bash
# 'r' is a function that runs the command line and checks for errors...
. config.sh
. functions.sh

# Assume gateway IP to be ibuilder host -> Put it in hosts
IP=$(route -n | grep "^0.0.0.0" | awk '{print $2}')
echo "Detected gateway IP: $IP"
echo "$IP   ibuilder ibuilder.cern.ch" >> /etc/hosts

# Prepare filesystem
if [ -z "$CMD_continue" ]; then

    # If we are not continuing create basic structures:
    
    # Prepare very basic system requirements
    r mkdir -p ${DIR_FAKEROOT}/dev/pts
    r mkdir -p ${DIR_FAKEROOT}/proc
    r mkdir -p ${DIR_FAKEROOT}/sys
    r mkdir -p ${DIR_FAKEROOT}/etc/sysconfig
    r mkdir -p ${DIR_FAKEROOT}/boot/grub

    # Create basic devices
    r cp -a /dev/random ${DIR_FAKEROOT}/dev/

    # Used for later..
    r cp /etc/resolv.conf ${DIR_FAKEROOT}/etc

    # Setup fstab
    r cat << 'EOF' > ${DIR_FAKEROOT}/etc/fstab
LABEL=root              /                       ext3    defaults        1 1
devpts                  /dev/pts                devpts  gid=5,mode=620  0 0
none                    /dev/shm                tmpfs   defaults        0 0
proc                    /proc                   proc    defaults        0 0
sysfs                   /sys                    sysfs   defaults        0 0
/dev/cdrom              /mnt/cdrom              auto    noauto,ro,owner,exec    0 0
/var/swap               swap                    swap    defaults        0 0
EOF

    # Enable networking on the machine
    r cat << 'EOF' > ${DIR_FAKEROOT}/etc/sysconfig/network
NETWORKING=yes
HOSTNAME=localhost.localdomain
EOF

fi

# Mount basic filesystems
r mount -t proc ${DIR_FAKEROOT}/proc ${DIR_FAKEROOT}/proc
r mount -t sysfs ${DIR_FAKEROOT}/sys ${DIR_FAKEROOT}/sys

# Install GRUB-specific stuff only if we need bootloader
if [ "$CMD_bootloader" == "yes" ]; then

# Setup default grub.conf (This will be replaced by the build.sh later, this is just for making package 'grub' not complain)
r cat << 'EOF' > ${DIR_FAKEROOT}/boot/grub/grub.conf
# grub.conf generated by anaconda
#
# Note that you do not have to rerun grub after making changes to this file
# NOTICE:  You have a /boot partition.  This means that
#          all kernel and initrd paths are relative to /boot/, eg.
#          root (hd0,0)
#          kernel /vmlinuz-version ro root=/dev/mapper/system-RootVol
#          initrd /initrd-[generic-]version.img
#boot=/dev/sda
default=0
timeout=5
#splashimage=(hd0,0)/grub/splash.xpm.gz
hiddenmenu
title CernVM Appliance (2.6.32-131.12.1.el6.x86_64)
        root (hd0,0)
        kernel /boot/vmlinuz-2.6.32-131.12.1.el6.x86_64 ro root=LABEL=CERNVM quiet
        initrd /boot/initrd-2.6.32-131.12.1.el6.x86_64.img
EOF

fi
